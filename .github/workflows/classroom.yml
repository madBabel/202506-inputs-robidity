name: Autograding Tests
on:
  repository_dispatch:
  workflow_dispatch:
permissions:
  checks: write
  actions: read
  contents: read

jobs:
  autograding-tests:
    if: github.actor != 'github-classroom[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check file exists
        id: file
        run: |
          if [[ -f .github/workflows/inputs.yml ]]; then
            echo "success"
          else
            echo "fail"
            exit 1
          fi

      - name: Validate dry-run input
        id: dryrun
        run: |
          if grep -q "dry-run:" .github/workflows/inputs.yml &&
             grep -q "type: boolean" .github/workflows/inputs.yml &&
             grep -q "default: false" .github/workflows/inputs.yml &&
             grep -q "Skip deployment and only print build output" .github/workflows/inputs.yml; then
            echo "success"
          else
            echo "fail"
            exit 1
          fi

      - name: Validate target input
        id: target
        run: |
          if grep -q "target:" .github/workflows/inputs.yml &&
             grep -q "type: environment" .github/workflows/inputs.yml &&
             grep -q "required: true" .github/workflows/inputs.yml &&
             grep -q "Which environment the workflow will target" .github/workflows/inputs.yml; then
            echo "success"
          else
            echo "fail"
            exit 1
          fi

      - name: Validate tag input
        id: tag
        run: |
          if grep -q "tag:" .github/workflows/inputs.yml &&
             grep -q "type: choice" .github/workflows/inputs.yml &&
             grep -q "default: v3" .github/workflows/inputs.yml &&
             grep -q "v1" .github/workflows/inputs.yml &&
             grep -q "v2" .github/workflows/inputs.yml &&
             grep -q "v3" .github/workflows/inputs.yml &&
             grep -q "Release from which to build and deploy" .github/workflows/inputs.yml; then
            echo "success"
          else
            echo "fail"
            exit 1
          fi

      - name: Validate tag usage in build step
        id: buildstep
        run: |
          if grep -q "name: Build" .github/workflows/inputs.yml then
            echo "success"
          else
            echo "fail"
            exit 1
          fi

      - name: Validate deploy step conditions
        id: deployconditions
        run: |
          if grep -q "needs: build" .github/workflows/inputs.yml &&
             grep -q "if:.*inputs.dry-run == false" .github/workflows/inputs.yml; then
            echo "success"
          else
            echo "fail"
            exit 1
          fi

      - name: Validate environment use in deploy
        id: deployenv
        run: |
          if grep -q "environment:.*\${{ inputs.target }}" .github/workflows/inputs.yml &&
             grep -q "Deploying to.*\${{ inputs.target }}" .github/workflows/inputs.yml; then
            echo "success"
          else
            echo "fail"
            exit 1
          fi

  autograding-reporter:
    needs: autograding-tests
    runs-on: ubuntu-latest
    steps:
      - name: Test 1 - File exists
        uses: classroom-resources/autograding-io-grader@v1
        id: test1
        with:
          test-name: 'Workflow file exists'
          command: 'echo ${{ needs.autograding-tests.outputs.result }}'
          input: ''
          expected-output: 'success'
          comparison-method: 'exact'
          max-score: 10

      - name: Test 2 - Valid dry-run input
        uses: classroom-resources/autograding-io-grader@v1
        id: test2
        with:
          test-name: 'dry-run input valid'
          command: 'echo ${{ steps.dryrun.outputs.result }}'
          input: ''
          expected-output: 'success'
          comparison-method: 'exact'
          max-score: 10

      - name: Test 3 - Valid target input
        uses: classroom-resources/autograding-io-grader@v1
        id: test3
        with:
          test-name: 'target input valid'
          command: 'echo ${{ steps.target.outputs.result }}'
          input: ''
          expected-output: 'success'
          comparison-method: 'exact'
          max-score: 10

      - name: Test 4 - Valid tag input
        uses: classroom-resources/autograding-io-grader@v1
        id: test4
        with:
          test-name: 'tag input valid'
          command: 'echo ${{ steps.tag.outputs.result }}'
          input: ''
          expected-output: 'success'
          comparison-method: 'exact'
          max-score: 10

      - name: Test 5 - Build step uses tag
        uses: classroom-resources/autograding-io-grader@v1
        id: test5
        with:
          test-name: 'Build step uses tag'
          command: 'echo ${{ steps.buildstep.outputs.result }}'
          input: ''
          expected-output: 'success'
          comparison-method: 'exact'
          max-score: 10

      - name: Test 6 - Deploy has correct conditions
        uses: classroom-resources/autograding-io-grader@v1
        id: test6
        with:
          test-name: 'Deploy conditions valid'
          command: 'echo ${{ steps.deployconditions.outputs.result }}'
          input: ''
          expected-output: 'success'
          comparison-method: 'exact'
          max-score: 10

      - name: Test 7 - Deploy uses dynamic environment
        uses: classroom-resources/autograding-io-grader@v1
        id: test7
        with:
          test-name: 'Deploy environment dynamic'
          command: 'echo ${{ steps.deployenv.outputs.result }}'
          input: ''
          expected-output: 'success'
          comparison-method: 'exact'
          max-score: 10

      - name: Report results
        uses: classroom-resources/autograding-grading-reporter@v1
        with:
          runners: test1,test2,test3,test4,test5,test6,test7
        env:
          TEST1_RESULTS: "${{ steps.test1.outputs.result }}"
          TEST2_RESULTS: "${{ steps.test2.outputs.result }}"
          TEST3_RESULTS: "${{ steps.test3.outputs.result }}"
          TEST4_RESULTS: "${{ steps.test4.outputs.result }}"
          TEST5_RESULTS: "${{ steps.test5.outputs.result }}"
          TEST6_RESULTS: "${{ steps.test6.outputs.result }}"
          TEST7_RESULTS: "${{ steps.test7.outputs.result }}"
